package cs355;

import cs355.controller.CS355Controller;
import cs355.model.image.CS355Image;
import cs355.view.ViewRefresher;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.Semaphore;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageWriter;
import javax.imageio.stream.ImageOutputStream;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;

/**
 * This is the main window of the app. This implements MouseListener
 * and MouseMotionListener, even though technically, the student's
 * CS355Controller should. Doing so allows the frame to capture
 * mouse events that should update the coordinate label.
 * @author Talonos
 */
class CS355Frame extends javax.swing.JFrame implements KeyListener, MouseListener, MouseMotionListener {

	private static final long serialVersionUID = -7380457417773266819L;

	// Because the constructor is private, we store an instance here.
	private static CS355Frame instance;

	// These are used for the coordLbl.
	private static final String FORMAT = "[%3d,%3d]";
	private static final String NOTHING = "[ -1, -1]";

	// The selected *drawing* color.
	private Color selectedColor = Color.BLACK;

	// These are used to prevent race conditions on key presses.
	private final Set<Integer> keysPressed = new TreeSet<>();
	private final Semaphore protectKeyList = new Semaphore(1);
	private Thread keyPollingThread;

	// The student's CS355Controller.
	private final CS355Controller controller;

	// The current image and drawing files.
	private File imageFile;
	private File drawingFile;

	/**
	 * Returns the static instance of the frame.
	 * Used because the constructor is private.
	 * @return the static instance of the frame.
	 */
	static CS355Frame inst() {
		if (instance == null) {
			throw new IllegalStateException("Tried to get instance of CS355Frame without initializing it first!");
		}
		return instance;
	}

	/**
	 * Creates a new frame.
	 * @param c = the student's CS355Controller.
	 * @param v  = the student's ViewRefresher.
	 */
	public static void createCS355Frame(CS355Controller c, ViewRefresher v) {
		instance = new CS355Frame(c, v);
		instance.start();
		instance.setVisible(true);
	}

	/**
	 * Allows the app to tell if the frame has been initialized.
	 * @return true if the frame has been initialized, false otherwise.
	 */
	static boolean isInitialized() {
		return (instance != null);
	}

	/**
	 * The private constructor. It needs to initialize all of the
	 * frame's internal components, as well as the RedrawRoutine.
	 * @param c = an instance of the student's CS355Controller.
	 * @param v = an instance of the student's ViewRefresher.
	 */
	private CS355Frame(CS355Controller c, ViewRefresher v) {
		controller = c;
		imageFile = null;
		drawingFile = null;
		initComponents();
		RedrawRoutine r = RedrawRoutine.inst();
		r.initialize(canvas, v);
	}

	/**
	 * This method is just so we don't "leak this"
	 * (NetBeans' term, not mine) in the constructor.
	 * Always call this right after creating the frame.
	 */
	public void start() {
		canvas.addMouseListener(this);
		canvas.addMouseMotionListener(this);
		canvas.addKeyListener(this);
		colorBtn.addKeyListener(this);
		lineBtn.addKeyListener(this);
		squareBtn.addKeyListener(this);
		rectBtn.addKeyListener(this);
		circleBtn.addKeyListener(this);
		ellipseBtn.addKeyListener(this);
		triangleBtn.addKeyListener(this);
		selectBtn.addKeyListener(this);
		zoomInBtn.addKeyListener(this);
		zoomOutBtn.addKeyListener(this);
		houseBtn.addKeyListener(this);
		vertScrollBar.addKeyListener(this);
		horScrollBar.addKeyListener(this);
		setSelectedColor(new Color(128, 128, 128, 0));
		keyPollingThread = new Thread(new pollingThread(this));
		keyPollingThread.start();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvas = new java.awt.Canvas();
        canvas = new CS355Canvas();
        colorBtn = new javax.swing.JButton();
        lineBtn = new javax.swing.JButton();
        squareBtn = new javax.swing.JButton();
        rectBtn = new javax.swing.JButton();
        circleBtn = new javax.swing.JButton();
        ellipseBtn = new javax.swing.JButton();
        triangleBtn = new javax.swing.JButton();
        selectBtn = new javax.swing.JButton();
        zoomInBtn = new javax.swing.JButton();
        zoomOutBtn = new javax.swing.JButton();
        vertScrollBar = new javax.swing.JScrollBar();
        horScrollBar = new javax.swing.JScrollBar();
        colorCanvas = new java.awt.Canvas();
        colorCanvas = new CS355SmallCanvas();
        houseBtn = new javax.swing.JButton();
        imageBtn = new javax.swing.JButton();
        coordLbl = new javax.swing.JLabel();
        zoomLbl = new javax.swing.JLabel();
        debugLbl = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openImageItem = new javax.swing.JMenuItem();
        openDrawingItem = new javax.swing.JMenuItem();
        openSceneItem = new javax.swing.JMenuItem();
        fileSeparator1 = new javax.swing.JPopupMenu.Separator();
        saveImageItem = new javax.swing.JMenuItem();
        saveDrawingItem = new javax.swing.JMenuItem();
        fileSeparator2 = new javax.swing.JPopupMenu.Separator();
        savePictureItem = new javax.swing.JMenuItem();
        fileSeparator3 = new javax.swing.JPopupMenu.Separator();
        revertImageItem = new javax.swing.JMenuItem();
        revertDrawingItem = new javax.swing.JMenuItem();
        fileSeparator4 = new javax.swing.JPopupMenu.Separator();
        quitItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        deleteShapeItem = new javax.swing.JMenuItem();
        imageMenu = new javax.swing.JMenu();
        brightnessItem = new javax.swing.JMenuItem();
        contrastItem = new javax.swing.JMenuItem();
        grayscaleItem = new javax.swing.JMenuItem();
        blurUniformItem = new javax.swing.JMenuItem();
        blurMedianItem = new javax.swing.JMenuItem();
        sharpenItem = new javax.swing.JMenuItem();
        detectEdgesItem = new javax.swing.JMenuItem();
        objectMenu = new javax.swing.JMenu();
        moveForwardItem = new javax.swing.JMenuItem();
        moveBackwardItem = new javax.swing.JMenuItem();
        objectSeparator1 = new javax.swing.JPopupMenu.Separator();
        sendFrontItem = new javax.swing.JMenuItem();
        sendBackItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(664, 648));

        canvas.setBackground(new java.awt.Color(0, 0, 0));
        canvas.setMaximumSize(new java.awt.Dimension(512, 512));
        canvas.setMinimumSize(new java.awt.Dimension(512, 512));
        canvas.setSize(new java.awt.Dimension(512, 512));

        colorBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cs355/res/Colors.png"))); // NOI18N
        colorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorBtnActionPerformed(evt);
            }
        });

        lineBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cs355/res/Line.png"))); // NOI18N
        lineBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineBtnActionPerformed(evt);
            }
        });

        squareBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cs355/res/Square.png"))); // NOI18N
        squareBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                squareBtnActionPerformed(evt);
            }
        });

        rectBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cs355/res/Rectangle.png"))); // NOI18N
        rectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectBtnActionPerformed(evt);
            }
        });

        circleBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cs355/res/Circle.png"))); // NOI18N
        circleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleBtnActionPerformed(evt);
            }
        });

        ellipseBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cs355/res/Ellipse.png"))); // NOI18N
        ellipseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ellipseBtnActionPerformed(evt);
            }
        });

        triangleBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cs355/res/Triangle.png"))); // NOI18N
        triangleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                triangleBtnActionPerformed(evt);
            }
        });

        selectBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cs355/res/Select.png"))); // NOI18N
        selectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectBtnActionPerformed(evt);
            }
        });

        zoomInBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cs355/res/ZoomIn.png"))); // NOI18N
        zoomInBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInBtnActionPerformed(evt);
            }
        });

        zoomOutBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cs355/res/ZoomOut.png"))); // NOI18N
        zoomOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutBtnActionPerformed(evt);
            }
        });

        vertScrollBar.setMaximum(2047);
        vertScrollBar.setVisibleAmount(2047);
        vertScrollBar.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                vertScrollBarAdjustmentValueChanged(evt);
            }
        });

        horScrollBar.setMaximum(2047);
        horScrollBar.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        horScrollBar.setVisibleAmount(2047);
        horScrollBar.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                horScrollBarAdjustmentValueChanged(evt);
            }
        });

        houseBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cs355/res/House.png"))); // NOI18N
        houseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                houseBtnActionPerformed(evt);
            }
        });

        imageBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cs355/res/Camera.png"))); // NOI18N
        imageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageBtnActionPerformed(evt);
            }
        });

        coordLbl.setFont(new java.awt.Font("Bitstream Vera Sans Mono", 1, 15)); // NOI18N
        coordLbl.setText("[ -1, -1]");

        zoomLbl.setFont(new java.awt.Font("Bitstream Vera Sans Mono", 1, 15)); // NOI18N
        zoomLbl.setText("100%");

        debugLbl.setFont(new java.awt.Font("Bitstream Vera Sans Mono", 1, 15)); // NOI18N

        fileMenu.setText("File");

        openImageItem.setText("Open Image");
        openImageItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openImageItemActionPerformed(evt);
            }
        });
        fileMenu.add(openImageItem);

        openDrawingItem.setText("Open Drawing");
        openDrawingItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDrawingItemActionPerformed(evt);
            }
        });
        fileMenu.add(openDrawingItem);

        openSceneItem.setText("Open Scene");
        openSceneItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSceneItemActionPerformed(evt);
            }
        });
        fileMenu.add(openSceneItem);
        fileMenu.add(fileSeparator1);

        saveImageItem.setText("Save Image");
        saveImageItem.setToolTipText("");
        saveImageItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveImageItem);

        saveDrawingItem.setText("Save Drawing");
        saveDrawingItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDrawingItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveDrawingItem);
        fileMenu.add(fileSeparator2);

        savePictureItem.setText("Save Picture");
        savePictureItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePictureItemActionPerformed(evt);
            }
        });
        fileMenu.add(savePictureItem);
        fileMenu.add(fileSeparator3);

        revertImageItem.setText("Revert Image");
        revertImageItem.setEnabled(imageFile != null);
        revertImageItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revertImageItemActionPerformed(evt);
            }
        });
        fileMenu.add(revertImageItem);

        revertDrawingItem.setText("Revert Drawing");
        revertDrawingItem.setEnabled(drawingFile != null);
        revertDrawingItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revertDrawingItemActionPerformed(evt);
            }
        });
        fileMenu.add(revertDrawingItem);
        fileMenu.add(fileSeparator4);

        quitItem.setText("Quit");
        quitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitItemActionPerformed(evt);
            }
        });
        fileMenu.add(quitItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        deleteShapeItem.setText("Delete Shape");
        deleteShapeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteShapeItemActionPerformed(evt);
            }
        });
        editMenu.add(deleteShapeItem);

        menuBar.add(editMenu);

        imageMenu.setText("Image");

        brightnessItem.setText("Brightness");
        brightnessItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brightnessItemActionPerformed(evt);
            }
        });
        imageMenu.add(brightnessItem);

        contrastItem.setText("Contrast");
        contrastItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrastItemActionPerformed(evt);
            }
        });
        imageMenu.add(contrastItem);

        grayscaleItem.setText("Grayscale");
        grayscaleItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grayscaleItemActionPerformed(evt);
            }
        });
        imageMenu.add(grayscaleItem);

        blurUniformItem.setText("Blur (Uniform)");
        blurUniformItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blurUniformItemActionPerformed(evt);
            }
        });
        imageMenu.add(blurUniformItem);

        blurMedianItem.setText("Blur (Median)");
        blurMedianItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blurMedianItemActionPerformed(evt);
            }
        });
        imageMenu.add(blurMedianItem);

        sharpenItem.setText("Sharpen");
        sharpenItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sharpenItemActionPerformed(evt);
            }
        });
        imageMenu.add(sharpenItem);

        detectEdgesItem.setText("Detect Edges");
        detectEdgesItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detectEdgesItemActionPerformed(evt);
            }
        });
        imageMenu.add(detectEdgesItem);

        menuBar.add(imageMenu);

        objectMenu.setText("Object");

        moveForwardItem.setText("Move Forward");
        moveForwardItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveForwardItemActionPerformed(evt);
            }
        });
        objectMenu.add(moveForwardItem);

        moveBackwardItem.setText("Move Backward");
        moveBackwardItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBackwardItemActionPerformed(evt);
            }
        });
        objectMenu.add(moveBackwardItem);
        objectMenu.add(objectSeparator1);

        sendFrontItem.setText("Send to Front");
        sendFrontItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendFrontItemActionPerformed(evt);
            }
        });
        objectMenu.add(sendFrontItem);

        sendBackItem.setText("Send to Back");
        sendBackItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBackItemActionPerformed(evt);
            }
        });
        objectMenu.add(sendBackItem);

        menuBar.add(objectMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(zoomInBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(selectBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(triangleBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ellipseBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(circleBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rectBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(squareBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lineBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(colorBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(zoomOutBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(imageBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(houseBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(vertScrollBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(colorCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(horScrollBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(zoomLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(coordLbl)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(debugLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(horScrollBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(colorCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(vertScrollBar, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(canvas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(coordLbl)
                                    .addComponent(zoomLbl)
                                    .addComponent(debugLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(colorBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lineBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(squareBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rectBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(circleBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ellipseBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(triangleBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zoomInBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zoomOutBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(houseBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imageBtn)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * Called when the color button is hit. This method was
	 * created by NetBeans. It can be edited, but it cannot
	 * be deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void colorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorBtnActionPerformed
		Color c = JColorChooser.showDialog(rootPane, "Pick a Color; any Color!", Color.yellow);
		controller.colorButtonHit(c);
    }//GEN-LAST:event_colorBtnActionPerformed

	/**
	 * Called when the rectangle button is hit. This method was
	 * created by NetBeans. It can be edited, but it cannot be
	 * deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void rectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectBtnActionPerformed
		controller.rectangleButtonHit();
    }//GEN-LAST:event_rectBtnActionPerformed

	/**
	 * Called when the square button is hit. This method was
	 * created by NetBeans. It can be edited, but it cannot
	 * be deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void squareBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_squareBtnActionPerformed
		controller.squareButtonHit();
    }//GEN-LAST:event_squareBtnActionPerformed

	/**
	 * Called when the circle button is hit. This method was
	 * created by NetBeans. It can be edited, but it cannot
	 * be deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void circleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleBtnActionPerformed
		controller.circleButtonHit();
    }//GEN-LAST:event_circleBtnActionPerformed

	/**
	 * Called when the ellipse button is hit. This method was
	 * created by NetBeans. It can be edited, but it cannot be
	 * deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void ellipseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ellipseBtnActionPerformed
		controller.ellipseButtonHit();
    }//GEN-LAST:event_ellipseBtnActionPerformed

	/**
	 * Called when the triangle button is hit. This method was
	 * created by NetBeans. It can be edited, but it cannot be
	 * deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void triangleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triangleBtnActionPerformed
		controller.triangleButtonHit();
    }//GEN-LAST:event_triangleBtnActionPerformed

	/**
	 * Called when the line button is hit. This method was
	 * created by NetBeans. It can be edited, but it cannot
	 * be deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void lineBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineBtnActionPerformed
		controller.lineButtonHit();
    }//GEN-LAST:event_lineBtnActionPerformed

	/**
	 * Called when the select button is hit. This method was
	 * created by NetBeans. It can be edited, but it cannot
	 * be deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void selectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectBtnActionPerformed
		controller.selectButtonHit();
    }//GEN-LAST:event_selectBtnActionPerformed

	/**
	 * Called when the zoom out button is hit. This method was
	 * created by NetBeans. It can be edited, but it cannot be
	 * deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void zoomOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutBtnActionPerformed
		controller.zoomOutButtonHit();
    }//GEN-LAST:event_zoomOutBtnActionPerformed

	/**
	 * Called when the zoom in button is hit. This method was
	 * created by NetBeans. It can be edited, but it cannot be
	 * deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void zoomInBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInBtnActionPerformed
		controller.zoomInButtonHit();
    }//GEN-LAST:event_zoomInBtnActionPerformed

	/**
	 * Called when the horizontal scrollbar is adjusted. This
	 * method was created by NetBeans. It can be edited, but
	 * it cannot be deleted, nor can you change the method
	 * signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void horScrollBarAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_horScrollBarAdjustmentValueChanged
		controller.hScrollbarChanged(evt.getValue());
    }//GEN-LAST:event_horScrollBarAdjustmentValueChanged

	/**
	 * Called when the vertical scrollbar is adjusted. This
	 * method was created by NetBeans. It can be edited, but
	 * it cannot be deleted, nor can you change the method
	 * signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void vertScrollBarAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_vertScrollBarAdjustmentValueChanged
		controller.vScrollbarChanged(evt.getValue());
    }//GEN-LAST:event_vertScrollBarAdjustmentValueChanged

	/**
	 * Called when the house button is hit. This method was
	 * created by NetBeans. It can be edited, but it cannot
	 * be deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void houseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_houseBtnActionPerformed
		controller.toggle3DModelDisplay();
    }//GEN-LAST:event_houseBtnActionPerformed

	/**
	 * Called when the Save CS355Image menu item is hit. This method
	 * was created by NetBeans. It can be edited, but it cannot
	 * be deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void saveImageItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageItemActionPerformed

		// Let the user select a file.
		File f = FileChooser.getImageFile(false);
		if (f == null) {
			return;
		}

		// Set the new drawing file.
		imageFile = f;

		// Enable the Revert Drawing menu item.
		revertImageItem.setEnabled(true);

		// Send the file to the controller.
		controller.saveImage(imageFile);
    }//GEN-LAST:event_saveImageItemActionPerformed

	/**
	 * Called when the Open CS355Image menu item is hit. This method
	 * was created by NetBeans. It can be edited, but it cannot
	 * be deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void openImageItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openImageItemActionPerformed

		// Get the file and validate it.
		File f = FileChooser.getImageFile(true);
		if (f == null) {
			return;
		}

		// Set the new drawing file.
		imageFile = f;

		// Enable the Revert Drawing menu item.
		revertImageItem.setEnabled(true);

		// Send the file to the controller.
		controller.openImage(imageFile);
    }//GEN-LAST:event_openImageItemActionPerformed

	/**
	 * Called when the Quit menu item is hit. This method was
	 * created by NetBeans. It can be edited, but it cannot
	 * be deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void quitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitItemActionPerformed
		System.exit(0);
    }//GEN-LAST:event_quitItemActionPerformed

	/**
	 * Called when the Brightness menu item is hit. This method
	 * was created by NetBeans. It can be edited, but it cannot
	 * be deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void brightnessItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brightnessItemActionPerformed

		// Show an input dialog to the user.
		String brightnessAmount = JOptionPane.showInputDialog(this,
				"What percentage do you wish to increase brightness by?", "0");
		try {
			// Figure out what integer the user gave us.
			int brightnessAmountNum = Integer.parseInt(brightnessAmount);

			// Chastise the user if necessary.
			if (brightnessAmountNum > 100 || brightnessAmountNum < -100) {
				JOptionPane.showMessageDialog(this, "That is not a valid number. Please enter a number between -100 and 100.",
						"Unable to change brightness", JOptionPane.ERROR_MESSAGE);
				return;
			}

			// Call the controller.
			controller.doChangeBrightness(brightnessAmountNum);
		}
		catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, "That is not a valid number.",
					"Unable to change brightness", JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_brightnessItemActionPerformed

	/**
	 * Called when the Contrast menu item is hit. This method
	 * was created by NetBeans. It can be edited, but it cannot
	 * be deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void contrastItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrastItemActionPerformed

		// Show an input dialog to the user.
		String contrastAmount = JOptionPane.showInputDialog(this,
				"How much do you wish to increase contrast by?", "0");
		try {
			// Figure out what integer the user gave us.
			int contrastAmountNum = Integer.parseInt(contrastAmount);

			// Chastise the user if necessary.
			if (contrastAmountNum > 100 || contrastAmountNum < -100) {
				JOptionPane.showMessageDialog(this, "That is not a valid number. Please enter a number between -100 and 100.",
						"Unable to change contrast", JOptionPane.ERROR_MESSAGE);
				return;
			}

			// Call the controller.
			controller.doChangeContrast(contrastAmountNum);
		}
		catch (NumberFormatException e) {
			JOptionPane.showMessageDialog(this, "That is not a valid number.",
					"Unable to change contrast", JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_contrastItemActionPerformed

	/**
	 * Called when the Uniform Blur menu item is hit. This method
	 * was created by NetBeans. It can be edited, but it cannot
	 * be deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void blurUniformItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blurUniformItemActionPerformed
		controller.doUniformBlur();
    }//GEN-LAST:event_blurUniformItemActionPerformed

	/**
	 * Called when the Median Blur menu item is hit. This method
	 * was created by NetBeans. It can be edited, but it cannot
	 * be deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void blurMedianItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blurMedianItemActionPerformed
		controller.doMedianBlur();
    }//GEN-LAST:event_blurMedianItemActionPerformed

	/**
	 * Called when the Sharpen menu item is hit. This method was
	 * created by NetBeans. It can be edited, but it cannot be
	 * deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void sharpenItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sharpenItemActionPerformed
		controller.doSharpen();
    }//GEN-LAST:event_sharpenItemActionPerformed

	/**
	 * Called when the Detect Edges menu item is hit. This method
	 * was created by NetBeans. It can be edited, but it cannot be
	 * deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void detectEdgesItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detectEdgesItemActionPerformed
		controller.doEdgeDetection();
    }//GEN-LAST:event_detectEdgesItemActionPerformed

	/**
	 * Called when the image button is hit. This method was
	 * created by NetBeans. It can be edited, but it cannot
	 * be deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void imageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageBtnActionPerformed
		controller.toggleBackgroundDisplay();
    }//GEN-LAST:event_imageBtnActionPerformed

	/**
	 * Called when the Delete Shape menu item is hit. This method
	 * was created by NetBeans. It can be edited, but it cannot be
	 * deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void deleteShapeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteShapeItemActionPerformed
		controller.doDeleteShape();
    }//GEN-LAST:event_deleteShapeItemActionPerformed

	/**
	 * Called when the Move Forward menu item is hit. This method
	 * was created by NetBeans. It can be edited, but it cannot be
	 * deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void moveForwardItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveForwardItemActionPerformed
		controller.doMoveForward();
    }//GEN-LAST:event_moveForwardItemActionPerformed

	/**
	 * Called when the Move Backward menu item is hit. This method
	 * was created by NetBeans. It can be edited, but it cannot be
	 * deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void moveBackwardItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBackwardItemActionPerformed
		controller.doMoveBackward();
    }//GEN-LAST:event_moveBackwardItemActionPerformed

	/**
	 * Called when the Send to Front menu item is hit. This
	 * method was created by NetBeans. It can be edited, but
	 * it cannot be deleted, nor can you change the method
	 * signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void sendFrontItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendFrontItemActionPerformed
		controller.doSendToFront();
    }//GEN-LAST:event_sendFrontItemActionPerformed

	/**
	 * Called when the Send to Back menu item is hit. This
	 * method was created by NetBeans. It can be edited, but
	 * it cannot be deleted, nor can you change the method
	 * signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void sendBackItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBackItemActionPerformed
		controller.doSendtoBack();
    }//GEN-LAST:event_sendBackItemActionPerformed

	/**
	 * Called when the Save Drawing menu item is hit. This method
	 * was created by NetBeans. It can be edited, but it cannot be
	 * deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void saveDrawingItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDrawingItemActionPerformed

		// Get the file and validate it.
		File f = FileChooser.getJsonFile(false);
		if (f == null) {
			return;
		}

		// Set the new drawing file.
		drawingFile = f;

		// Enable the Revert Drawing menu item.
		revertDrawingItem.setEnabled(true);

		// Send the file to the controller.
		controller.saveDrawing(drawingFile);
    }//GEN-LAST:event_saveDrawingItemActionPerformed

	/**
	 * Called when the Open Drawing menu item is hit. This method
	 * was created by NetBeans. It can be edited, but it cannot be
	 * deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void openDrawingItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDrawingItemActionPerformed

		// Get the file and validate it.
		File f = FileChooser.getJsonFile(true);
		if (f == null) {
			return;
		}

		// Set the new drawing file.
		drawingFile = f;

		// Enable the Revert Drawing menu item.
		revertDrawingItem.setEnabled(true);

		// Send the file to the controller.
		controller.openDrawing(drawingFile);
    }//GEN-LAST:event_openDrawingItemActionPerformed

	/**
	 * Called when the Save Picture menu item is hit. This method
	 * was created by NetBeans. It can be edited, but it cannot be
	 * deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void savePictureItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePictureItemActionPerformed

		// Get the image to write out and the file to write to.
		BufferedImage bimg = RedrawRoutine.inst().refreshView();
		File f = FileChooser.getImageFile(false);

		// Figure out which image type it is.
		String suffix = FileUtils.getExtension(f);
		ImageWriter writer = javax.imageio.ImageIO.getImageWritersBySuffix(suffix).next();

		// Write out the image.
		try (ImageOutputStream out = javax.imageio.ImageIO.createImageOutputStream(f)) {
			writer.setOutput(out);
			writer.write(bimg);
		}
		catch (IOException ex) {
			Logger.getLogger(CS355Image.class.getName()).log(Level.SEVERE, null, ex);
			this.setDebugText(ex.getMessage());
		}
    }//GEN-LAST:event_savePictureItemActionPerformed

	/**
	 * Called when the Open Scene menu item is hit. This method
	 * was created by NetBeans. It can be edited, but it cannot
	 * be deleted, nor can you change the method signature.
	 * @param evt = information about the button press event.
	 *				Generally, this isn't needed.
	 */
    private void openSceneItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSceneItemActionPerformed

		// Let the user select a file.
		File file = FileChooser.getSceneFile();
		if (file == null) {
			return;
		}

		// Send the file to the controller.
		controller.openScene(file);
    }//GEN-LAST:event_openSceneItemActionPerformed

    private void grayscaleItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grayscaleItemActionPerformed
		controller.doGrayscale();
    }//GEN-LAST:event_grayscaleItemActionPerformed

    private void revertImageItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revertImageItemActionPerformed
		controller.openImage(imageFile);
    }//GEN-LAST:event_revertImageItemActionPerformed

    private void revertDrawingItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revertDrawingItemActionPerformed
		controller.openDrawing(drawingFile);
    }//GEN-LAST:event_revertDrawingItemActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem blurMedianItem;
    private javax.swing.JMenuItem blurUniformItem;
    private javax.swing.JMenuItem brightnessItem;
    private java.awt.Canvas canvas;
    private javax.swing.JButton circleBtn;
    private javax.swing.JButton colorBtn;
    private java.awt.Canvas colorCanvas;
    private javax.swing.JMenuItem contrastItem;
    private javax.swing.JLabel coordLbl;
    private javax.swing.JLabel debugLbl;
    private javax.swing.JMenuItem deleteShapeItem;
    private javax.swing.JMenuItem detectEdgesItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JButton ellipseBtn;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPopupMenu.Separator fileSeparator1;
    private javax.swing.JPopupMenu.Separator fileSeparator2;
    private javax.swing.JPopupMenu.Separator fileSeparator3;
    private javax.swing.JPopupMenu.Separator fileSeparator4;
    private javax.swing.JMenuItem grayscaleItem;
    private javax.swing.JScrollBar horScrollBar;
    private javax.swing.JButton houseBtn;
    private javax.swing.JButton imageBtn;
    private javax.swing.JMenu imageMenu;
    private javax.swing.JButton lineBtn;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem moveBackwardItem;
    private javax.swing.JMenuItem moveForwardItem;
    private javax.swing.JMenu objectMenu;
    private javax.swing.JPopupMenu.Separator objectSeparator1;
    private javax.swing.JMenuItem openDrawingItem;
    private javax.swing.JMenuItem openImageItem;
    private javax.swing.JMenuItem openSceneItem;
    private javax.swing.JMenuItem quitItem;
    private javax.swing.JButton rectBtn;
    private javax.swing.JMenuItem revertDrawingItem;
    private javax.swing.JMenuItem revertImageItem;
    private javax.swing.JMenuItem saveDrawingItem;
    private javax.swing.JMenuItem saveImageItem;
    private javax.swing.JMenuItem savePictureItem;
    private javax.swing.JButton selectBtn;
    private javax.swing.JMenuItem sendBackItem;
    private javax.swing.JMenuItem sendFrontItem;
    private javax.swing.JMenuItem sharpenItem;
    private javax.swing.JButton squareBtn;
    private javax.swing.JButton triangleBtn;
    private javax.swing.JScrollBar vertScrollBar;
    private javax.swing.JButton zoomInBtn;
    private javax.swing.JLabel zoomLbl;
    private javax.swing.JButton zoomOutBtn;
    // End of variables declaration//GEN-END:variables

	/**
	 * Sets a specific attribute of a specific scrollbar.
	 * @param scrollBar = the scrollbar that will be changed.
	 * @param attribute = the attribute of the scrollbar that will be changed.
	 * @param number  = the new value for the attribute.
	 */
	void setScrollAttribute(CS355Scrollbar scrollBar, CS355ScrollbarAttr attribute, int number) {

		// I was getting warnings if I set this to null,
		// but it shouldn't have mattered. Oh well.
		JScrollBar scrollbarToChange = horScrollBar;

		// Figure out which scrollbar.
		switch (scrollBar) {
			case H_SCROLL_BAR:
				scrollbarToChange = horScrollBar;
				break;
			case V_SCROLL_BAR:
				scrollbarToChange = vertScrollBar;
				break;
			default:
				throw new IllegalArgumentException("Bad scrollbar type!");

		}

		// Figure out which attribute.
		switch (attribute) {
			case MAX:
				scrollbarToChange.setMaximum(number);
				break;
			case MIN:
				scrollbarToChange.setMinimum(number);
				break;
			case KNOB:
				scrollbarToChange.setVisibleAmount(number);
				break;
			case POSITION:
				scrollbarToChange.setValue(number);
				break;
			default:
				throw new IllegalArgumentException("Bad Attribute type!");

		}
	}

	/**
	 * Sets the zoom text with the current zoom.
	 * @param zoom = the current zoom.
	 */
	void setZoomText(double zoom) {
		zoomLbl.setText(String.format("%3.0f%%", zoom * 100.0));
	}

	/**
	 * Sets the debug label to the text the user wants.
	 * @param fmt = the format string to use.
	 * @param args = the args for the format string.
	 */
	void setDebugText(String fmt, Object... args) {
		debugLbl.setText(String.format(fmt, args));
	}

	/**
	 * Changes the selected <i>drawing</i> color. This should
	 * be called by the student's CS355Controller instance.
	 * @param c = the new drawing color.
	 */
	void setSelectedColor(Color c) {
		selectedColor = c;
		try {
			Thread.sleep(100);
		} catch (InterruptedException ex) {
			Logger.getLogger(CS355Frame.class.getName()).log(Level.SEVERE, null, ex);
		}
		System.out.println("c: " + c);

		// Color the CS355SmallCanvas (color indicator).
		Graphics2D toDrawOn = (Graphics2D) colorCanvas.getGraphics();
		toDrawOn.setColor(Color.BLACK);
		toDrawOn.fillRect(0, 0, colorCanvas.getSize().width, colorCanvas.getSize().height);
		toDrawOn.setColor(Color.white);
		toDrawOn.fillOval(1, 1, colorCanvas.getSize().width - 2, colorCanvas.getSize().height - 2);
		toDrawOn.setColor(c);
		toDrawOn.fillRect(0, 0, colorCanvas.getSize().width, colorCanvas.getSize().height);
	}

	/**
	 * Allows the CS355SmallCanvas to reset itself.
	 */
	void setSelectedColor() {
		setSelectedColor(selectedColor);
	}

	/**
	 * Needed just for implementing KeyListener.
	 * @param e = the captured event.
	 */
	@Override
	public void keyTyped(KeyEvent e) {
		// Typing doesn't do anything.
	}

	/**
	 * We need to capture key presses for the OpenGL house.
	 * @param e = the captured key press.
	 */
	@Override
	public void keyPressed(KeyEvent e) {
        // This is a set instead of a list because holding down a key will call
		// this function many times in a row. You cannot guarentee that there is
		// only one press per release like you can with a click.
		protectKeyList.acquireUninterruptibly();
		keysPressed.add(e.getKeyCode());
		protectKeyList.release();
	}

	/**
	 * We need to capture key releases for the OpenGL house.
	 * @param e = the captured key release.
	 */
	@Override
	public void keyReleased(KeyEvent e) {
		protectKeyList.acquireUninterruptibly();
		keysPressed.remove(e.getKeyCode());
		protectKeyList.release();
	}

	/**
	 * Just forward the mouse event to the
	 * student's CS355Controller.
	 * @param me  = the captured event.
	 */
	@Override
	public void mouseClicked(MouseEvent me) {
		controller.mouseClicked(me);
	}

	/**
	 * Just forward the mouse event to the
	 * student's CS355Controller.
	 * @param me  = the captured event.
	 */
	@Override
	public void mousePressed(MouseEvent me) {
		controller.mousePressed(me);
	}

	/**
	 * Just forward the mouse event to the
	 * student's CS355Controller.
	 * @param me  = the captured event.
	 */
	@Override
	public void mouseReleased(MouseEvent me) {
		controller.mouseReleased(me);
	}

	/**
	 * This event means that we have to start
	 * updating the coordinate label.
	 * @param me = the captured event.
	 */
	@Override
	public void mouseEntered(MouseEvent me) {
		coordLbl.setText(String.format(FORMAT, me.getX(), me.getY()));
		controller.mouseEntered(me);
	}

	/**
	 * This event means that we have to stop
	 * updating the coordinate label.
	 * @param me = the captured event.
	 */
	@Override
	public void mouseExited(MouseEvent me) {
		coordLbl.setText(NOTHING);
		controller.mouseExited(me);
	}

	/**
	 * This event means that we have to keep
	 * updating the coordinate label.
	 * @param me = the captured event.
	 */
	@Override
	public void mouseDragged(MouseEvent me) {
		coordLbl.setText(String.format(FORMAT, me.getX(), me.getY()));
		controller.mouseDragged(me);
	}

	/**
	 * This event means that we have to keep
	 * updating the coordinate label.
	 * @param me = the captured event.
	 */
	@Override
	public void mouseMoved(MouseEvent me) {
		coordLbl.setText(String.format(FORMAT, me.getX(), me.getY()));
		controller.mouseMoved(me);
	}

	/**
	 * Allows us to prevent race conditions on keyboard input.
	 */
	private static class pollingThread implements Runnable {

		// We need to keep an instance of the parent frame.
		private final CS355Frame parent;

		public pollingThread(CS355Frame parent) {
			this.parent = parent;
		}

		/**
		 * This is the polling loop.
		 */
		@Override
		public void run() {

			// Loop forever and keep polling.
			while (true) {
				try {
					// Sleep for one frame (we want 30 frames/sec).
					Thread.sleep(33);

					// Poll for any pressed keys.
					if (!parent.keysPressed.isEmpty()) {
                        // This is to prevent the form from concurrently modifying
						// the list while iterating through it.
						parent.protectKeyList.acquire();
						parent.controller.keyPressed(parent.keysPressed.iterator());
						parent.protectKeyList.release();
					}
				} catch (InterruptedException ex) {
					Logger.getLogger(CS355Frame.class.getName()).log(Level.SEVERE, null, ex);
				}
			}
		}
	}
}
