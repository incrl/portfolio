package cs355;

import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import cs355.model.drawing.Shape;
import java.lang.reflect.Type;

/**
 * A class used to serialize/deserialize Shapes to/from JSON.
 * @author gavin
 */
public class JsonShape implements JsonSerializer<Shape>, JsonDeserializer<Shape> {

	// A unique key we can use to store the Shape type.
	private static final String KEY = "SHAPE_TYPE";

	/**
	 * Used to serialize a shape. It serializes
	 * an extra property: the shape type.
	 * @param s the shape to serialize.
	 * @param type the shape's real type. <b>DO NOT USE THIS!</b>
	 *			   It may result in an infinite loop according to
	 *			   Gson documentation.
	 * @param jsc = the context that allows us to continue serialization.
	 * @return the serialized JsonElement.
	 */
	@Override
	public JsonElement serialize(Shape s, Type type, JsonSerializationContext jsc) {

		// Serialize the shape.
		JsonElement je = jsc.serialize(s);

		// Add the property to the resulting JsonElement.
		je.getAsJsonObject().addProperty(KEY, s.getClass().getCanonicalName());

		return je;
	}

	/**
	 * Used to deserialize a shape. It uses the property
	 * generated by the serializer to create the proper shape.
	 * @param je the current JsonElement that we need to deserialize from.
	 * @param type the type of the Shape. <b>DO NOT USE THIS!</b>
	 *				 It may result in an infinite loop according to
	 *				 Gson documentation.
	 * @param jdc the context that allows us to continue with deserialization.
	 * @return the deserialized shape.
	 * @throws JsonParseException when the JSON is invalid.
	 */
	@Override
	public Shape deserialize(JsonElement je, Type type, JsonDeserializationContext jdc) throws JsonParseException {

		// We need a JsonObject to do the next part.
		JsonObject jo = je.getAsJsonObject();

		// Get the property that we serialized earlier.
		String className = jo.get(KEY).getAsString();
		try {
			// Load the class as an object and use it in deserialization.
			Class<? extends Shape> c = (Class<? extends Shape>) Class.forName(className);
			return jdc.deserialize(je, c);
		}
		catch (ClassNotFoundException e) {
			throw new JsonParseException(e);
		}
	}

}
